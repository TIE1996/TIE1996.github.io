{"version":3,"sources":["webpack:///src/app/questions/questions.page.html","webpack:///src/app/questions/questions-routing.module.ts","webpack:///src/app/questions/questions.module.ts","webpack:///src/app/questions/questions.page.scss","webpack:///src/app/questions/questions.page.ts"],"names":["routes","path","component","QuestionsPageRoutingModule","imports","forChild","exports","QuestionsPageModule","declarations","QuestionsPage","route","dataservice","toastController","router","positiveMessages","negativeMessages","continueMessage","slideOpts","initialSlide","speed","allowSlideNext","numberOfConsecutiveErrors","numberOfMaximumErrors","timeoutDuration","max","Math","floor","random","solutions","getSubmissions","queryParams","subscribe","params","topic","console","log","themen","forEach","element","titel","thema","get","totalCorrect","slider","getActiveIndex","currentIndex","lockSwipeToNext","index","questions","answer","indexOf","solution","toLowerCase","rightAnswer","wrongAnswer","possibility","answerIndex","i","answerStatus","splice","length","presentToast","correct","showOverlay","document","getElementById","style","visibility","setTimeout","navigateByUrl","type","message","getRandomInt","create","duration","toast","present","selector","template"],"mappings":"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","file":"questions-questions-module-es5.js","sourcesContent":["export default \"<ion-header [translucent]=\\\"true\\\">\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"goBack()\\\">\\n                <ion-icon name=\\\"arrow-back-outline\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-title>\\n            {{thema.titel}}\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n\\n<!-- Overlay for timeout purpose-->\\n<div visible=\\\"true\\\" style=\\\"position:fixed; visibility:hidden; height: 100vh; width: 100vw; background-color: grey; z-index: 1000; opacity: 0.9;\\\" id=\\\"overlay\\\">\\n    <div style=\\\"height: 100%; width: 100%; display: flex; align-items: center; justify-content: center; flex-direction: column;\\\">\\n        <ion-spinner name=\\\"lines\\\" style=\\\"height: 100%;\\n        max-width: 150px;\\n        max-height: 150px;\\n        width: 100%;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        flex-direction: column;\\\"></ion-spinner>\\n        <p stlye=\\\"font-size:30px\\\">\\n            Timeout!\\n        </p>\\n    </div>\\n</div>\\n\\n<ion-content [fullscreen]=\\\"true\\\">\\n    <div id=\\\"container\\\" style=\\\"transform: unset; top: unset; height: 100%\\\">\\n        <ion-slides (ionSlideDidChange)=\\\"checkLock()\\\" pager=\\\"true\\\" [options]=\\\"slideOpts\\\" style=\\\"height: 100%;\\\">\\n            <ng-container *ngFor=\\\"let question of thema.questions, let i = index\\\">\\n                <ion-slide style=\\\"display: block;height: 100%;\\\">\\n                    <ng-container *ngIf=\\\"question.img != undefined\\\">\\n                        <img [src]=\\\"question.img\\\" />\\n                    </ng-container>\\n                    <p>\\n                        {{question.question}}\\n                    </p>\\n                    <ng-container *ngIf=\\\"question.type === 'normal'\\\">\\n                        <ion-input [(ngModel)]=\\\"solutions.solutions.get(topic).solution[i]\\\" placeholder=\\\"Enter answer\\\"></ion-input>\\n                        <ion-button expand=\\\"block\\\" [disabled]=\\\"solutions.solutions.get(topic).correct[i]\\\" (click)=\\\"checkAnswer(i)\\\">Submit</ion-button>\\n\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"question.type === 'multiple_choice'\\\">\\n                        <ng-container *ngFor=\\\"let possibility of question.possiblities, let k = index\\\">\\n                            <ion-button expand=\\\"full\\\" shape=\\\"round\\\" [color]=\\\"(solutions.solutions.get(topic).answerStatus[i][k] === 0) ? 'primary' : ((solutions.solutions.get(topic).answerStatus[i][k] === 1) ? 'danger' : 'success')\\\" (click)=\\\"checkMultAnswer(possibility, i, k)\\\" [disabled]=\\\"solutions.solutions.get(topic).answerStatus[i][k] !== 0\\\">{{possibility}}</ion-button>\\n                        </ng-container>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"solutions.solutions.get(topic).correct[i]\\\">\\n                        <ion-icon name=\\\"checkmark-circle-outline\\\" style=\\\"color: limegreen; max-width: 100px; max-height: 100px; height: 50vw; width: 50vw;\\\"></ion-icon>\\n                    </ng-container>\\n                </ion-slide>\\n            </ng-container>\\n        </ion-slides>\\n    </div>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QuestionsPage } from './questions.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QuestionsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class QuestionsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { QuestionsPageRoutingModule } from './questions-routing.module';\n\nimport { QuestionsPage } from './questions.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    QuestionsPageRoutingModule\n  ],\n  declarations: [QuestionsPage]\n})\nexport class QuestionsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3F1ZXN0aW9ucy9xdWVzdGlvbnMucGFnZS5zY3NzIn0= */\";","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { Themen } from '../themen';\nimport { Solutions } from '../topic';\nimport { DataService } from '../data.service';\nimport { IonSlides, IonButton } from '@ionic/angular';\nimport { ToastController } from '@ionic/angular';\nimport { element } from 'protractor';\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.page.html',\n  styleUrls: ['./questions.page.scss'],\n})\nexport class QuestionsPage implements OnInit {\n\n\n  @ViewChild(IonSlides) slider: IonSlides;\n\n  //Nachrichten wenn die Aufgabe korrekt ist\n  positiveMessages = [\n    \"Super\",\n    \"Klasse\",\n    \"Wow!\"\n  ];\n\n\n  //Nachrichten bei falscher Eingabe\n  negativeMessages = [\n    \"Mensche Kerle\",\n    \"Das geht doch besser\",\n    \"Streng dich mal an!\"\n  ];\n\n  //Nachrichten falls noch nicht alle korrekten Antworten bei Multiple Choice gewählt wurden\n  continueMessage = [\n    \"Das war es noch nicht ganz\",\n    \"Fast alles\",\n    \"Weitermachen!\",\n    \"Noch nicht ganz\"\n  ];\n\n\n  topic: String;\n  solutions: Solutions\n  thema;\n  slideOpts = {\n    initialSlide: 0,\n    speed: 400,\n    allowSlideNext: false\n  }; \n  numberOfConsecutiveErrors: number = 0;\n\n  //timeout nach 2 fehlern am Stück\n  numberOfMaximumErrors:  number = 3;\n\n  //timeout 5 sekunden\n  timeoutDuration: number = 5000;\n\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  \n\n  constructor(private route: ActivatedRoute, private dataservice: DataService, public toastController: ToastController, private router: Router) {\n    \n  }\n\n  \n\n  ngOnInit() {\n    this.solutions = this.dataservice.getSubmissions();\n\n    this.route.queryParams.subscribe(params => {\n      this.topic = params['topic'];\n      console.log(this.topic);\n      Themen.themen.forEach(element => {\n        if(element.titel === this.topic) {\n          this.thema = element;\n          this.slideOpts.initialSlide = this.solutions.solutions.get(this.topic).totalCorrect;\n        }\n      });\n\n    });\n\n  }\n\n  async checkLock() {\n    console.log(\"swipe changed\")\n    let currentIndex = await this.slider.getActiveIndex();\n    if(currentIndex === this.solutions.solutions.get(this.topic).totalCorrect) {\n      this.slider.lockSwipeToNext(true);\n    } else {\n      this.slider.lockSwipeToNext(false);\n    }\n  }\n\n\n  checkAnswer(index: number) {\n    if(this.thema.questions[index].answer.indexOf(this.solutions.solutions.get(this.topic).solution[index].toLowerCase()) > -1) {\n      this.rightAnswer(index);\n    } else {\n      this.wrongAnswer();\n    }\n  }\n\n  checkMultAnswer(possibility: string, index: number, answerIndex: number) {\n    let i = this.thema.questions[index].answer.indexOf(possibility)\n\n    let element\n    if(i > -1) {\n      this.solutions.solutions.get(this.topic).answerStatus[index][answerIndex] = 2;\n      this.thema.questions[index].answer.splice(i, 1);\n      if(this.thema.questions[index].answer.length === 0) {\n        this.rightAnswer(index);\n      } else {\n        this.presentToast(\"continue\");\n      }\n    } else {\n      this.solutions.solutions.get(this.topic).answerStatus[index][answerIndex] = 1;\n      this.wrongAnswer();\n    } \n  }\n\n  rightAnswer(index: number)\n  {\n    this.presentToast(\"positive\");\n    this.slider.lockSwipeToNext(false);\n    this.solutions.solutions.get(this.topic).correct[index] = true;\n    this.solutions.solutions.get(this.topic).totalCorrect++;\n    this.numberOfConsecutiveErrors = 0;\n  }\n\n  wrongAnswer() {\n    this.presentToast(\"negative\");\n    this.numberOfConsecutiveErrors++;\n    if(this.numberOfConsecutiveErrors >= this.numberOfMaximumErrors) {\n      this.showOverlay();\n    }\n  }\n\n  showOverlay() {\n    document.getElementById(\"overlay\").style.visibility = \"visible\";\n    setTimeout(() => {\n      document.getElementById(\"overlay\").style.visibility = \"hidden\";\n    }, this.timeoutDuration)\n  }\n\n  goBack() {\n    this.router.navigateByUrl(\"/home\");\n  }\n\n  async presentToast(type: string) {\n\n    let message = \"\";\n    if(type === \"positive\") {\n      let index = this.getRandomInt(this.positiveMessages.length);\n      message = this.positiveMessages[index];\n\n    } else if (type == \"negative\") {\n      let index = this.getRandomInt(this.negativeMessages.length);\n      message = this.negativeMessages[index];\n    } else {\n      let index = this.getRandomInt(this.continueMessage.length);\n      message = this.continueMessage[index];\n    }\n    \n\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 2000\n    });\n    toast.present();\n  }\n}\n"]}