{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","./node_modules/@ionic/core/dist/esm/haptic-da73c8fd.js","./node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","./node_modules/@ionic/core/dist/esm/theme-c2dc54d9.js","./src/app/data.service.ts","./src/app/themen.ts","./src/app/topic.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;;;;;;;;;;;ACjCtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,KAAK;AACL;AACA,qBAAqB,iBAAiB;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEoI;;;;;;;;;;;;;ACzGpI;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","file":"common-es2015.js","sourcesContent":["const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","const HapticEngine = {\n    getEngine() {\n        const win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available() {\n        return !!this.getEngine();\n    },\n    isCordova() {\n        return !!window.TapticEngine;\n    },\n    isCapacitor() {\n        const win = window;\n        return !!win.Capacitor;\n    },\n    impact(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style });\n    },\n    notification(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style });\n    },\n    selection() {\n        this.impact({ style: 'light' });\n    },\n    selectionStart() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n    HapticEngine.impact(options);\n};\n\nexport { hapticImpact as a, hapticSelectionStart as b, hapticSelectionChanged as c, hapticSelectionEnd as d, hapticSelection as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","import { Injectable } from '@angular/core';\nimport { Themen } from './themen'\nimport { Solutions, Solution } from './topic'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  solutions: Solutions;\n\n  constructor() {\n    this.solutions = new Solutions();\n    Themen.themen.forEach((element) => {\n      // initialize Array for each topic\n      let solution = {\n        solution : new Array(element.questions.length),\n        correct : new Array(element.questions.length),\n        answerStatus : new Array<Array<number>>(element.questions.length),\n        totalCorrect: 0\n      };\n      for(let i = 0; i < solution.answerStatus.length; i++) {\n        solution.answerStatus[i] = new Array(6).fill(0)\n      }\n      this.solutions.solutions.set(element.titel, solution);\n    });\n  }\n\n\n  markAsCorrect(topic: string, index: number, solution: string) {\n    this.solutions.solutions.get(topic).correct[index] = true;\n    this.solutions.solutions.get(topic).solution[index] = solution;\n  }\n\n  getSubmissions(): Solutions {\n    return this.solutions;\n  }\n\n\n}\n","export const Themen = {\r\n    \"themen\": [\r\n      {\"titel\" : \"Reihenschaltung Grundlagen\",\r\n       \"questions\": [\r\n         {\r\n          \"img\" : \"../assets/reihenschaltung.jpg\",\r\n          \"type\": \"normal\",\r\n          \"question\": \"In einer Reihenschaltung sind die Ströme in allen Widerständen ...\",\r\n          \"answer\": [\r\n            \"gleich\",\r\n            \"derselbe\"\r\n          ]\r\n         },\r\n         {\r\n          \"type\": \"normal\",\r\n          \"question\": \"Der Gesamtwiderstand ist die ... aller Widerstände\",\r\n          \"answer\": [\r\n            \"summe\"\r\n          ]\r\n         },\r\n         \r\n         {\r\n          \"type\": \"normal\",\r\n          \"question\": \"Bei einer Reihenschaltung sind die Teilspannung proportional zum ...?\",\r\n          \"answer\": [\r\n            \"widerstand\"\r\n          ]\r\n         },\r\n         {\r\n          \"type\": \"multiple_choice\",\r\n          \"question\": \"Die Summe der Teilspannungen an den Widerständen entspricht der Gesamtspannung?\",\r\n          \"possiblities\" : [\r\n            \"Ja\",\r\n            \"Nein\"\r\n          ],\r\n          \"answer\": [\r\n            \"Ja\"\r\n          ]\r\n         },\r\n         {\r\n          \"type\": \"multiple_choice\",\r\n          \"question\": \"Welche der folgenden Formeln treffen bei einer Reihenschaltung zu?\",\r\n          \"possiblities\" : [\r\n            \"U_ges = U_1 = U_2\",\r\n            \"R_ges = R_1 = R_2\",\r\n            \"I_ges = I_1 = I_2\",\r\n            \"U_ges = U_1 + U_2\",\r\n            \"I_ges = U_ges / R_ges\",\r\n            \"I_1 = U_ges / R_ges\"\r\n          ],\r\n          \"answer\": [\r\n            \"I_1 = U_ges / R_ges\",\r\n            \"I_ges = U_ges / R_ges\",\r\n            \"I_ges = I_1 = I_2\",\r\n            \"U_ges = U_1 + U_2\"\r\n          ]\r\n         },\r\n\r\n       ]\r\n      },\r\n      {\r\n        \"titel\" : \"Einfache Rechnungen\",\r\n        \"questions\" : [\r\n          {\r\n            \"type\": \"multiple_choice\",\r\n            \"question\": \"Zwei in Reihe geschaltene Widerstände mit 10 Ohm entsprechen demnach einem Widerstand von ... Ohm?\",\r\n            \"possiblities\" : [\r\n              \"10 Ohm\",\r\n              \"20 Ohm\",\r\n              \"30 Ohm\",\r\n              \"40 Ohm\"\r\n            ],\r\n            \"answer\": [\r\n              \"20 Ohm\"\r\n            ]\r\n          },\r\n          {\r\n            \"type\": \"normal\",\r\n            \"question\": \"Der Gesamtstrom beträgt 5 A wie groß ist dann die Spannung (in Volt) an einem Widerstand mit 5 Ohm?\",\r\n            \"answer\": [\r\n              \"25\",\r\n              \"25 v\",\r\n              \"25v\"\r\n            ]\r\n           },\r\n        ]\r\n      }\r\n    ],\r\n  }","export interface Topic {\r\n    titel: String;\r\n    questions: Question[];\r\n}\r\nexport interface Question {\r\n    type: String;\r\n    text: String;\r\n    answer: String;\r\n}\r\nexport class Solutions {\r\n\r\n    constructor() {\r\n        this.solutions = new Map<String, Solution>();\r\n    }\r\n\r\n    solutions: Map<String, Solution>;\r\n\r\n}\r\nexport interface Solution {\r\n    solution: String[];\r\n    correct: boolean[];\r\n    totalCorrect: number;\r\n\r\n    //for the possibilites in multiple choice\r\n    //0: not pressed yet\r\n    //1: pressed, answer was wrong\r\n    //2: pressed, answer was right;\r\n    answerStatus: number[][];\r\n}"],"sourceRoot":"webpack:///"}